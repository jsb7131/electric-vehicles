{"version":3,"sources":["logo.svg","components/VehiclesDisplay.js","components/VehicleButtons.js","hooks/useVehicles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","VehiclesDisplay","props","vehiclesObj","current","length","map","vehicle","className","key","id","onClick","evt","remove","name","VehicleButtons","add","initialVehicles","uniqueId","useVehicles","useState","vehicles","setVehicles","useEffect","setTimeout","vehicleId","filter","clear","App","title","setTitle","targetRef","useRef","document","innerHTML","style","fontWeight","margin","ref","src","logo","alt","fontSize","value","marginTop","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b8e87af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 30%;\n  height: 210px;\n  background-color: black;\n  overflow: auto;\n`;\n\n// Show \"Loading...\" on page start, return list of vehicle divs, if list is cleared manually don't display \"Loading...\"\nfunction VehiclesDisplay(props) {\n  return (\n      <Container>\n        {\n          props.vehiclesObj.current.length > 0 && props.vehiclesObj.current !== \"\"\n            ? props.vehiclesObj.current.map(vehicle => {\n              return <div className=\"List-item\" key={vehicle.id} onClick={evt => props.vehiclesObj.remove(vehicle.id)}>{vehicle.name}</div>\n              })\n            : props.vehiclesObj.current === \"\"\n              ? \"\"\n              : \"Loading...\"\n        }\n      </Container>\n  );\n}\n\nexport default VehiclesDisplay;\n","import React from 'react';\n\nfunction VehicleButtons(props) {\n  return (\n      <div>\n        <label>Add: </label>\n        <button onClick={() => props.vehiclesObj.add({name: \"Rivian R1T\"})}>Rivian R1T</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"Alta Redshift\"})}>Alta Redshift</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"KTM Freeride E-XC\"})}>KTM Freeride E-XC</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"Pininfarina Battista\"})}>Pininfarina Battista</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"Lotus Evija\"})}>Lotus Evija</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"Rimac C_Two\"})}>Rimac C_Two</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"Tesla Roadster\"})}>Tesla Roadster</button>\n        <button onClick={() => props.vehiclesObj.add({name: \"Aspark Owl\"})}>Aspark Owl</button>\n      </div>\n  );\n}\n\nexport default VehicleButtons;\n","import { useState, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\n\n// Seeded vehicles\nconst initialVehicles = [\n  {id: uniqueId(), name: \"Rivian R1T\"},\n  {id: uniqueId(), name: \"Alta Redshift\"},\n  {id: uniqueId(), name: \"KTM Freeride E-XC\"}\n];\n\nconst useVehicles = () => {\n\n  const [vehicles, setVehicles] = useState([]);\n\n  // Emulate fetching of real data; add seeded vehicles to list\n  useEffect(() => {\n    setTimeout(() => {\n      setVehicles(initialVehicles);\n    }, 2000);\n  }, []);\n\n  // Add a vehicle to the list\n  const addVehicle = (vehicle) => {\n    setVehicles([...vehicles, {\n      ...vehicle,\n      id: uniqueId(),\n    }]);\n  };\n\n  // Remove a vehicle from the list\n  const removeVehicle = (vehicleId) => {\n    vehicles.length > 1 ? setVehicles(vehicles.filter(vehicle => vehicle.id !== vehicleId)) : setVehicles(\"\");\n  };\n\n  // Remove all items in the list\n  // Give it an empty string instead to act as the switch for not displaying \"Loading...\"\n  const clearVehicles = () => setVehicles(\"\");\n\n  return {\n    current: vehicles,\n    add: addVehicle,\n    remove: removeVehicle,\n    clear: clearVehicles\n  };\n};\n\nexport default useVehicles;\n","import React, { useState, useEffect, useRef } from 'react';\nimport logo from './logo.svg';\nimport VehiclesDisplay from './components/VehiclesDisplay';\nimport VehicleButtons from './components/VehicleButtons';\nimport useVehicles from './hooks/useVehicles';\nimport './App.css';\n\nfunction App() {\n\n  const [title, setTitle] = useState(\"Electric Vehicles\");\n\n  const targetRef = useRef(null);\n\n  const vehicles = useVehicles();\n\n  // Update document title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  // Update the title on the page\n  useEffect(() => {\n    targetRef.current.innerHTML = title;\n  }, [title]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p style={{fontWeight: \"bold\", margin: 0}} ref={targetRef}></p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p style={{fontSize: \"11px\"}}>Click on an item in the list to remove it</p>\n        <VehiclesDisplay vehiclesObj={vehicles}></VehiclesDisplay>\n        <VehicleButtons vehiclesObj={vehicles}></VehicleButtons>\n        <label>Title: <input value={title} style={{marginTop: \"8px\"}} onChange={evt => setTitle(evt.target.value)}></input></label>\n        <button onClick={() => vehicles.add({name: title})}>Add title to list</button>\n        <button style={{marginTop: \"8px\"}} onClick={() => vehicles.clear()}>Clear list</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}